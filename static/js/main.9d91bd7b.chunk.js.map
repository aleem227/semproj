{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","videoRef","useRef","canvasRef","model","setModel","useState","predictions","setPredictions","age","gender","isLoading","setIsLoading","cameraActive","setCameraActive","modelLoading","setModelLoading","capturedImage","setCapturedImage","latency","setLatency","selectedModel","setSelectedModel","modelLoadTime","setModelLoadTime","predictionStartTime","setPredictionStartTime","useEffect","isMounted","disposed","async","startLoadTime","performance","now","modelPath","loadedModel","error","tf","err","dispose","console","toFixed","alert","message","loadModel","handleModelChange","e","target","value","startCamera","navigator","mediaDevices","getUserMedia","Error","stream","video","facingMode","width","height","current","srcObject","play","onloadedmetadata","readyState","stopCamera","getTracks","forEach","track","stop","processImage","startTime","imageData","canvas","getContext","getImageData","tensor","fromPixels","resizeBilinear","toFloat","div","mean","std","sub","expandDims","result","predict","dataSync","endTime","t","Math","round","resetCapture","React","createElement","Fragment","className","type","name","checked","onChange","disabled","role","aria-label","src","alt","ref","autoPlay","playsInline","muted","viewBox","preserveAspectRatio","x1","y1","x2","y2","style","display","onClick","id","htmlFor","title","d","captureImage","context","videoWidth","videoHeight","drawImage","imageUrl","toDataURL","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9d91bd7b.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n// Re-enable TensorFlow.js import\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  // Re-add model state\r\n  const [model, setModel] = useState(null);\r\n  const [predictions, setPredictions] = useState({ age: null, gender: null });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [cameraActive, setCameraActive] = useState(false);\r\n  // Remove backend ready state since we'll use client-side model\r\n  const [modelLoading, setModelLoading] = useState(false);\r\n  const [capturedImage, setCapturedImage] = useState(null);\r\n  // Add latency state\r\n  const [latency, setLatency] = useState(null);\r\n  // Add selected model state\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  // Add model load time state\r\n  const [modelLoadTime, setModelLoadTime] = useState(null);\r\n  // Add prediction start time state\r\n  const [predictionStartTime, setPredictionStartTime] = useState(null);\r\n\r\n  // Load model when component mounts or when selected model changes\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => {\r\n    if (!selectedModel) return; // Don't load if no model selected\r\n\r\n    let isMounted = true;\r\n    let disposed = false;\r\n    setModelLoading(true);\r\n\r\n    const loadModel = async () => {\r\n      const startLoadTime = performance.now();\r\n      const modelPath = `/model/${selectedModel}/model.json`;\r\n      let loadedModel = null;\r\n      let error = null;\r\n\r\n      try {\r\n        loadedModel = await tf.loadLayersModel(modelPath);\r\n      } catch (err) {\r\n        error = err;\r\n      }\r\n\r\n      if (loadedModel) {\r\n        if (model) {\r\n          try {\r\n            model.dispose();\r\n          } catch (err) {\r\n            console.error('Error disposing previous model:', err);\r\n          }\r\n        }\r\n        if (isMounted && !disposed) {\r\n          setModel(loadedModel);\r\n          setModelLoadTime((performance.now() - startLoadTime).toFixed(2));\r\n          setModelLoading(false);\r\n        } else {\r\n          loadedModel.dispose();\r\n        }\r\n      } else {\r\n        setModelLoading(false);\r\n        console.error(`Error loading ${selectedModel} model:`, error);\r\n        alert(`Failed to load model: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    loadModel();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      disposed = true;\r\n    };\r\n  }, [selectedModel]);\r\n\r\n  // Handle model selection change\r\n  const handleModelChange = (e) => {\r\n    setSelectedModel(e.target.value);\r\n    setPredictions({ age: null, gender: null });\r\n    setLatency(null);\r\n  };\r\n\r\n  // Initialize camera\r\n  const startCamera = async () => {\r\n    try {\r\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n        throw new Error('Your browser does not support webcam access');\r\n      }\r\n      \r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { facingMode: 'user', width: 640, height: 480 }\r\n      });\r\n      \r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.play(); // Explicitly play the video\r\n        setCameraActive(true); // Set active immediately\r\n        \r\n        // Additional check after metadata loads\r\n        videoRef.current.onloadedmetadata = () => {\r\n          if (videoRef.current.readyState >= 2) {\r\n            setCameraActive(true);\r\n          }\r\n        };\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error accessing webcam:\", err);\r\n      setCameraActive(false);\r\n      alert(`Camera error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  // Stop camera\r\n  const stopCamera = () => {\r\n    if (videoRef.current && videoRef.current.srcObject) {\r\n      const tracks = videoRef.current.srcObject.getTracks();\r\n      tracks.forEach(track => track.stop());\r\n      videoRef.current.srcObject = null;\r\n      setCameraActive(false);\r\n    }\r\n  };\r\n\r\n  // Start camera automatically when component mounts\r\n  useEffect(() => {\r\n    startCamera();\r\n    \r\n    // Cleanup on component unmount\r\n    return () => {\r\n      stopCamera();\r\n    };\r\n  }, []);\r\n\r\n  // Capture image from webcam\r\n  const captureImage = () => {\r\n    if (!videoRef.current || !canvasRef.current) return;\r\n    if (!model) {\r\n      alert(\"Model is not loaded yet. Please wait.\");\r\n      return;\r\n    }\r\n    \r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    \r\n    // Set canvas dimensions to match video\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    \r\n    // Draw the current video frame to the canvas\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // Save captured image\r\n    const imageUrl = canvas.toDataURL('image/jpeg');\r\n    setCapturedImage(imageUrl);\r\n    \r\n    // Process the image and make prediction\r\n    processImage(canvas);\r\n  };\r\n\r\n  // Process image and make prediction using TensorFlow.js\r\n  const processImage = async (canvas) => {\r\n    setIsLoading(true);\r\n\r\n    // Start timing here\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      if (!model) {\r\n        throw new Error('Model is not loaded yet');\r\n      }\r\n\r\n      // Preprocess the image for the model\r\n      const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Convert to tensor and normalize\r\n      let tensor = tf.browser.fromPixels(imageData)\r\n        .resizeBilinear([224, 224]) // Resize to model input size\r\n        .toFloat()\r\n        .div(tf.scalar(255.0)); // Normalize to [0,1]\r\n\r\n      // Apply mean/std normalization (per channel)\r\n      const mean = tf.tensor1d([0.485, 0.456, 0.406]);\r\n      const std = tf.tensor1d([0.229, 0.224, 0.225]);\r\n      tensor = tensor.sub(mean).div(std);\r\n\r\n      tensor = tensor.expandDims(0); // Add batch dimension\r\n      \r\n      // Make prediction\r\n      const result = await model.predict(tensor);\r\n      \r\n      // Process the prediction results\r\n      // Assuming the model outputs [age, gender]\r\n      const predictions = await result[0].dataSync(); // Get age\r\n      const gender = await result[1].dataSync(); // Get gender\r\n      \r\n      // Calculate latency\r\n      const endTime = performance.now();\r\n      setLatency((endTime - startTime).toFixed(2));\r\n      \r\n      // Clean up tensor to prevent memory leaks\r\n      tensor.dispose();\r\n      result.forEach(t => t.dispose());\r\n      \r\n\r\n      // setPredictions({\r\n      //   age: Math.round(predictions[0]) - 9,\r\n      //   gender: gender[0] > 0.5 ? 'Female' : 'Male'\r\n      // });\r\n\r\n\r\n      setPredictions({\r\n        age: Math.round(predictions[0]) - (selectedModel === 'resnet34' ? 5 : 8),\r\n        gender: gender[0] > 0.5 ? 'Female' : 'Male'\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error processing image:\", err);\r\n      alert(`Error processing image: ${err.message}`);\r\n      resetCapture();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Reset the process\r\n  const resetCapture = async () => {\r\n    setCapturedImage(null);\r\n    setPredictions({ age: null, gender: null });\r\n    setLatency(null);\r\n    await startCamera();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modelLoading && (\r\n        <div className=\"model-loading-overlay\">\r\n          <div className=\"model-loading-spinner\"></div>\r\n          <div className=\"model-loading-text\">Loading model...</div>\r\n        </div>\r\n      )}\r\n      <div className=\"app-container\">\r\n        <div className=\"project-introduction\">\r\n          <div className=\"project-title\">Machine Learning - Semester Project</div>\r\n          <div className=\"authors\">\r\n            <ul>\r\n              <li>Muhammad Aleem Shakeel</li>\r\n              {/* <li>Sheza Naqvi</li>\r\n              <li>Zainab</li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"header\">\r\n          <h1>Age & Gender Predictor</h1>\r\n        </div>\r\n        \r\n        <div className=\"model-selection\">\r\n          <h3>Select Model</h3>\r\n          <div className=\"model-options\">\r\n            <label className={`model-option ${selectedModel === 'resnet34' ? 'selected' : ''}`}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"model\"\r\n                value=\"resnet34\"\r\n                checked={selectedModel === 'resnet34'}\r\n                onChange={handleModelChange}\r\n                disabled={isLoading || modelLoading}\r\n              />\r\n              <div className=\"model-details\">\r\n                <h4>ResNet-34</h4>\r\n                <p className=\"model-description\">Lightweight model with good latency and accuracy tradeoff</p>\r\n                <div className=\"model-specs\">\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Fast\">⚡</span> Fast inference\r\n                  </span>\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Balanced\">✓</span> Balanced accuracy\r\n                  </span>\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Mobile\">📱</span> Mobile-friendly\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </label>\r\n            \r\n            <label className={`model-option ${selectedModel === 'resnet152' ? 'selected' : ''}`}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"model\"\r\n                value=\"resnet152\"\r\n                checked={selectedModel === 'resnet152'}\r\n                onChange={handleModelChange}\r\n                disabled={isLoading || modelLoading}\r\n              />\r\n              <div className=\"model-details\">\r\n                <h4>ResNet-152</h4>\r\n                <p className=\"model-description\">State-of-the-art model with high accuracy</p>\r\n                <div className=\"model-specs\">\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Accurate\">🎯</span> Superior accuracy\r\n                  </span>\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Slower\">⏱️</span> Higher latency\r\n                  </span>\r\n                  <span className=\"spec-item\">\r\n                    <span role=\"img\" aria-label=\"Desktop\">💻</span> Better for desktop\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"main-content\">\r\n          <div className=\"video-section\">\r\n            <div className={`video-container ${cameraActive ? 'camera-active' : ''}`}>\r\n              {!capturedImage ? (\r\n                <video \r\n                  ref={videoRef}\r\n                  autoPlay\r\n                  playsInline\r\n                  muted\r\n                />\r\n              ) : (\r\n                <img \r\n                  src={capturedImage} \r\n                  alt=\"Captured\" \r\n                  className=\"captured-image\"\r\n                />\r\n              )}\r\n              \r\n              <div className=\"video-overlay\">\r\n                {!capturedImage && cameraActive && (\r\n                  <svg className=\"frame-lines\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n                    <line x1=\"30\" y1=\"0\" x2=\"30\" y2=\"10\" />\r\n                    <line x1=\"0\" y1=\"30\" x2=\"10\" y2=\"30\" />\r\n                    \r\n                    <line x1=\"70\" y1=\"0\" x2=\"70\" y2=\"10\" />\r\n                    <line x1=\"90\" y1=\"30\" x2=\"100\" y2=\"30\" />\r\n                    \r\n                    <line x1=\"30\" y1=\"90\" x2=\"30\" y2=\"100\" />\r\n                    <line x1=\"0\" y1=\"70\" x2=\"10\" y2=\"70\" />\r\n                    \r\n                    <line x1=\"70\" y1=\"90\" x2=\"70\" y2=\"100\" />\r\n                    <line x1=\"90\" y1=\"70\" x2=\"100\" y2=\"70\" />\r\n                  </svg>\r\n                )}\r\n              </div>\r\n              \r\n              <canvas ref={canvasRef} style={{ display: 'none' }} />\r\n            </div>\r\n            \r\n            <div className=\"camera-controls\">\r\n              {!capturedImage ? (\r\n                <>\r\n                  <div className=\"camera-toggle-container\">\r\n                    <input \r\n                      type=\"checkbox\"\r\n                      id=\"camera-toggle\"\r\n                      className=\"camera-toggle-checkbox\"\r\n                      checked={cameraActive}\r\n                      onChange={cameraActive ? stopCamera : startCamera}\r\n                      disabled={isLoading}\r\n                    />\r\n                    <label \r\n                      htmlFor=\"camera-toggle\" \r\n                      className=\"camera-toggle-label\"\r\n                      title={cameraActive ? \"Turn camera off\" : \"Turn camera on\"}\r\n                    >\r\n                      <div className=\"camera-toggle-inner\">\r\n                        <div className=\"camera-toggle-switch\">\r\n                          <svg className=\"camera-icon\" viewBox=\"0 0 24 24\">\r\n                            <path d=\"M18 10.48V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-4.48l4 3.98v-11l-4 3.98zm-2-.79V18H4V6h12v3.69z\" />\r\n                          </svg>\r\n                          <svg className=\"camera-off-icon\" viewBox=\"0 0 24 24\">\r\n                            <path d=\"M18 10.48V6c0-1.1-.9-2-2-2H8.83l2 2H16v3.17l1.83 1.83L18 10.48zm2.5-.48L15.17 4H12c-1.1 0-2 .9-2 2h-4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c.34 0 .65-.09.93-.24L20.5 10zM2.1 4.93L4 6.83V14c0 1.1.9 2 2 2h8.17l1.73 1.73c-.28.15-.59.24-.93.24H6c-1.1 0-2-.9-2-2V8.83L1.9 6.73 2.1 4.93z\" />\r\n                            <path d=\"M3.55 2.44L2.1 3.89l18 18 1.45-1.45z\" />\r\n                          </svg>\r\n                        </div>\r\n                      </div>\r\n                      <span className=\"toggle-status\">\r\n                        {cameraActive ? \"Camera On\" : \"Camera Off\"}\r\n                      </span>\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <button\r\n                    className=\"primary-button\"\r\n                    onClick={captureImage}\r\n                    disabled={!cameraActive || isLoading || modelLoading || !model || !selectedModel}\r\n                  >\r\n                    Capture Image\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <button \r\n                  className=\"secondary-button\"\r\n                  onClick={resetCapture}\r\n                  disabled={isLoading}\r\n                >\r\n                  Take New Photo\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"results-section\">\r\n            <div className=\"results-card\">\r\n              <h2>Analysis Results</h2>\r\n              \r\n              {isLoading ? (\r\n                <div className=\"loading-container\">\r\n                  <div className=\"loading-spinner\"></div>\r\n                  <p>Analyzing image with {selectedModel}...</p>\r\n                </div>\r\n              ) : predictions.age !== null ? (\r\n                <div className=\"prediction-results\">\r\n                  <div className=\"result-item\">\r\n                    <div className=\"result-label\">Age</div>\r\n                    <div className=\"result-value\">{predictions.age} years</div>\r\n                  </div>\r\n                  <div className=\"result-item\">\r\n                    <div className=\"result-label\">Gender</div>\r\n                    <div className=\"result-value\">{predictions.gender}</div>\r\n                  </div>\r\n                  <div className=\"performance-metrics\">\r\n                    <div className=\"result-item\">\r\n                      <div className=\"result-label\">Model Load Time</div>\r\n                      <div className=\"result-value\">{modelLoadTime} ms</div>\r\n                    </div>\r\n                    {latency && (\r\n                      <div className=\"result-item\">\r\n                        <div className=\"result-label\">Processing Time</div>\r\n                        <div className=\"result-value\">{latency} ms</div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"model-info\">Using {selectedModel === 'resnet34' ? 'ResNet-34' : 'ResNet-152'} model</div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"empty-results\">\r\n                  <p>Please select a model to begin.</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"info-card\">\r\n              <h3>How it works</h3>\r\n              <p>This app uses a TensorFlow.js model running directly in your browser to predict age and gender from facial images.</p>\r\n              <p>For best results:</p>\r\n              <ul>\r\n                <li>Ensure good lighting</li>\r\n                <li>Face the camera directly</li>\r\n                <li>Remove hats or sunglasses</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}