{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n  const $image = convertToTensor(image, 'image', 'threshold');\n  /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n  Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n  const RED_INTENCITY_COEF = 0.2989;\n  const GREEN_INTENCITY_COEF = 0.5870;\n  const BLUE_INTENCITY_COEF = 0.1140;\n  const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n  let $threshold = mul(tensor1d([threshValue]), 255);\n  let r, g, b, grayscale;\n  util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' + `but got rank ${$image.rank}.`);\n  util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' + 'image color channel must be equal to 3 or 1' + `but got ${$image.shape[2]}.`);\n  util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' + `but got dtype ${$image.dtype}.`);\n  util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n  if ($image.shape[2] === 3) {\n    [r, g, b] = split($image, [1, 1, 1], -1);\n    const $r = mul(r, RED_INTENCITY_COEF);\n    const $g = mul(g, GREEN_INTENCITY_COEF);\n    const $b = mul(b, BLUE_INTENCITY_COEF);\n    grayscale = add(add($r, $g), $b);\n  } else {\n    grayscale = image;\n  }\n  if (method === 'otsu') {\n    const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n    $threshold = otsu($histogram, totalPixelsInImage);\n  }\n  const invCondition = inverted ? lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n  const result = cast(mul(invCondition, 255), 'int32');\n  return result;\n}\nfunction otsu(histogram, total) {\n  let bestThresh = tensor1d([-1]);\n  let bestInBetVar = tensor1d([0]);\n  let cInBetVar = tensor1d([0]);\n  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n  for (let index = 0; index < histogram.size - 1; index++) {\n    classFirst = slice(histogram, 0, index + 1);\n    classSecond = slice(histogram, index + 1);\n    weightForeground = div(sum(classFirst), total);\n    weightBack = div(sum(classSecond), total);\n    const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n    meanFirst = div(meanFirstDivA, sum(classFirst));\n    const meanSecFill = fill(classSecond.shape, classFirst.size);\n    const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n    const meanSecMul = mul(classSecond, meanSecAdd);\n    meanSec = div(sum(meanSecMul), sum(classSecond));\n    const cInBetVarSubA = sub(meanFirst, meanSec);\n    const cInBetVarSubB = sub(meanFirst, meanSec);\n    const cInBetVarMul = mul(weightForeground, weightBack);\n    cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n    const condition = greater(cInBetVar, bestInBetVar);\n    bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n    bestThresh = where(condition, tensor1d([index]), bestThresh);\n  }\n  return bestThresh;\n}\nexport const threshold = /* @__PURE__ */op({\n  threshold_\n});","map":null,"metadata":{},"sourceType":"module"}