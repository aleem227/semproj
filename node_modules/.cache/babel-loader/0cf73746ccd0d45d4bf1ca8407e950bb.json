{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    equation\n  } = attrs;\n  const tensors = inputs;\n  const {\n    allDims,\n    summedDims,\n    idDims\n  } = backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {\n    path,\n    steps\n  } = backend_util.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {\n        permutationIndices: perm,\n        expandDims: dimsToExpand\n      } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({\n          inputs: {\n            x: tensors[idTerm]\n          },\n          backend,\n          attrs: {\n            perm\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      const targetShape = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({\n          inputs: {\n            x\n          },\n          backend,\n          attrs: {\n            shape: targetShape\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({\n          inputs: {\n            a: x,\n            b: out\n          },\n          backend\n        });\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n  return out;\n}\nexport const einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum\n};","map":null,"metadata":{},"sourceType":"module"}