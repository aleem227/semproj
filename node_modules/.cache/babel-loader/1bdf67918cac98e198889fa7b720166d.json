{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport class LruCache {\n  constructor(maxEntries) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map();\n  }\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  get(key) {\n    let entry;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  put(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  getMaxEntries() {\n    return this.maxEntries;\n  }\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  setMaxEntries(maxEntries) {\n    if (maxEntries < 0) {\n      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${maxEntries}.`);\n    }\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n    this.maxEntries = maxEntries;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}