{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { cast } from '../cast';\nimport { einsum } from '../einsum';\nimport { expandDims } from '../expand_dims';\nimport { op } from '../operation';\nimport { tensor1d } from '../tensor1d';\n/**\n * Converts images from RGB format to grayscale.\n *\n * @param image A RGB tensor to convert. The `image`'s last dimension must\n *     be size 3 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rgbToGrayscale_(image) {\n  const $image = convertToTensor(image, 'image', 'RGBToGrayscale');\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n  util.assert($image.rank >= 2, () => 'Error in RGBToGrayscale: images must be at least rank 2, ' + `but got rank ${$image.rank}.`);\n  util.assert(lastDims === 3, () => 'Error in RGBToGrayscale: last dimension of an RGB image ' + `should be size 3, but got size ${lastDims}.`);\n  // Remember original dtype so we can convert back if needed\n  const origDtype = $image.dtype;\n  const fltImage = cast($image, 'float32');\n  const rgbWeights = tensor1d([0.2989, 0.5870, 0.1140]);\n  let grayFloat;\n  switch ($image.rank) {\n    case 2:\n      grayFloat = einsum('ij,j->i', fltImage, rgbWeights);\n      break;\n    case 3:\n      grayFloat = einsum('ijk,k->ij', fltImage, rgbWeights);\n      break;\n    case 4:\n      grayFloat = einsum('ijkl,l->ijk', fltImage, rgbWeights);\n      break;\n    case 5:\n      grayFloat = einsum('ijklm,m->ijkl', fltImage, rgbWeights);\n      break;\n    case 6:\n      grayFloat = einsum('ijklmn,n->ijklm', fltImage, rgbWeights);\n      break;\n    default:\n      throw new Error('Not a valid tensor rank.');\n  }\n  grayFloat = expandDims(grayFloat, -1);\n  return cast(grayFloat, origDtype);\n}\nexport const rgbToGrayscale = /* @__PURE__ */op({\n  rgbToGrayscale_\n});","map":null,"metadata":{},"sourceType":"module"}