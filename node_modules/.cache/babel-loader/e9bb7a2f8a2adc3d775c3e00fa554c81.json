{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [ops.abs(getParamValue('x', node, tensorMap, context))];\n    case 'Acos':\n      return [ops.acos(getParamValue('x', node, tensorMap, context))];\n    case 'Acosh':\n      return [ops.acosh(getParamValue('x', node, tensorMap, context))];\n    case 'Asin':\n      return [ops.asin(getParamValue('x', node, tensorMap, context))];\n    case 'Asinh':\n      return [ops.asinh(getParamValue('x', node, tensorMap, context))];\n    case 'Atan':\n      return [ops.atan(getParamValue('x', node, tensorMap, context))];\n    case 'Atan2':\n      return [ops.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n    case 'Atanh':\n      return [ops.atanh(getParamValue('x', node, tensorMap, context))];\n    case 'Ceil':\n      return [ops.ceil(getParamValue('x', node, tensorMap, context))];\n    case 'Complex':\n      return [ops.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n    case 'Cos':\n      return [ops.cos(getParamValue('x', node, tensorMap, context))];\n    case 'Cosh':\n      return [ops.cosh(getParamValue('x', node, tensorMap, context))];\n    case 'Elu':\n      return [ops.elu(getParamValue('x', node, tensorMap, context))];\n    case 'Erf':\n      return [ops.erf(getParamValue('x', node, tensorMap, context))];\n    case 'Exp':\n      return [ops.exp(getParamValue('x', node, tensorMap, context))];\n    case 'Expm1':\n      {\n        return [ops.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Floor':\n      return [ops.floor(getParamValue('x', node, tensorMap, context))];\n    case 'Log':\n      return [ops.log(getParamValue('x', node, tensorMap, context))];\n    case 'Log1p':\n      {\n        return [ops.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Imag':\n      return [ops.imag(getParamValue('x', node, tensorMap, context))];\n    case 'Neg':\n      return [ops.neg(getParamValue('x', node, tensorMap, context))];\n    case 'Reciprocal':\n      {\n        return [ops.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Real':\n      return [ops.real(getParamValue('x', node, tensorMap, context))];\n    case 'Relu':\n      return [ops.relu(getParamValue('x', node, tensorMap, context))];\n    case 'Round':\n      {\n        return [ops.round(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Selu':\n      return [ops.selu(getParamValue('x', node, tensorMap, context))];\n    case 'Sigmoid':\n      return [ops.sigmoid(getParamValue('x', node, tensorMap, context))];\n    case 'Sin':\n      return [ops.sin(getParamValue('x', node, tensorMap, context))];\n    case 'Sign':\n      {\n        return [ops.sign(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sinh':\n      {\n        return [ops.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Softplus':\n      {\n        return [ops.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sqrt':\n      {\n        return [ops.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Square':\n      {\n        return [ops.square(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tanh':\n      {\n        return [ops.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tan':\n      return [ops.tan(getParamValue('x', node, tensorMap, context))];\n    case 'ClipByValue':\n      return [ops.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n    case 'Relu6':\n      return [ops.relu6(getParamValue('x', node, tensorMap, context))];\n    case 'Rsqrt':\n      return [ops.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'LeakyRelu':\n      return [ops.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    case 'Prelu':\n      return [ops.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    case 'IsNan':\n      return [ops.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'IsInf':\n      return [ops.isInf(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'IsFinite':\n      return [ops.isFinite(getTensor(node.inputNames[0], tensorMap, context))];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';","map":null,"metadata":{},"sourceType":"module"}