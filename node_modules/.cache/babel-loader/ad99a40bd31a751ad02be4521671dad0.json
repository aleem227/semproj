{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n    case 'UpperBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(sortedSequence, values)];\n      }\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = ops.unique(x);\n        return [result.values, result.indices];\n      }\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = ops.unique(x, axis);\n        return [result.values, result.indices];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":null,"metadata":{},"sourceType":"module"}