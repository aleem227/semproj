{"ast":null,"code":"/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nclass CategoryEncoding extends Layer {\n  constructor(args) {\n    super(args);\n    this.numTokens = args.numTokens;\n    if (args.outputMode) {\n      this.outputMode = args.outputMode;\n    } else {\n      this.outputMode = 'multiHot';\n    }\n  }\n  getConfig() {\n    const config = {\n      'numTokens': this.numTokens,\n      'outputMode': this.outputMode\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape == null) {\n      return [this.numTokens];\n    }\n    if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {\n      inputShape.push(this.numTokens);\n      return inputShape;\n    }\n    inputShape[inputShape.length - 1] = this.numTokens;\n    return inputShape;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if (inputs.dtype !== 'int32') {\n        inputs = K.cast(inputs, 'int32');\n      }\n      let countWeights;\n      if (typeof kwargs['countWeights'] !== 'undefined') {\n        if (this.outputMode !== 'count') {\n          throw new ValueError(`countWeights is not used when outputMode !== count.\n              Received countWeights=${kwargs['countWeights']}`);\n        }\n        countWeights = getExactlyOneTensor(kwargs['countWeights']);\n      }\n      const maxValue = max(inputs);\n      const minValue = min(inputs);\n      const greaterEqualMax = greater(this.numTokens, maxValue).bufferSync().get(0);\n      const greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n      if (!(greaterEqualMax && greaterMin)) {\n        throw new ValueError('Input values must be between 0 < values <=' + ` numTokens with numTokens=${this.numTokens}`);\n      }\n      return utils.encodeCategoricalInputs(inputs, this.outputMode, this.numTokens, countWeights);\n    });\n  }\n}\n/** @nocollapse */\nCategoryEncoding.className = 'CategoryEncoding';\nexport { CategoryEncoding };\nserialization.registerClass(CategoryEncoding);","map":null,"metadata":{},"sourceType":"module"}